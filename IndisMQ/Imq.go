// automatically generated by the FlatBuffers compiler, do not modify

package IndisMQ

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Imq struct {
	_tab flatbuffers.Table
}

func GetRootAsImq(buf []byte, offset flatbuffers.UOffsetT) *Imq {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Imq{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Imq) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Imq) Body(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Imq) BodyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Imq) BodyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Imq) From() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Imq) To() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Imq) Broker() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Imq) MutateBroker(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *Imq) Cmd() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Imq) MutateCmd(n int8) bool {
	return rcv._tab.MutateInt8Slot(12, n)
}

func (rcv *Imq) MsgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Imq) MsgType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Imq) MutateMsgType(n int8) bool {
	return rcv._tab.MutateInt8Slot(16, n)
}

func (rcv *Imq) Sts() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Imq) MutateSts(n int8) bool {
	return rcv._tab.MutateInt8Slot(18, n)
}

func (rcv *Imq) Path() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Imq) Err() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Imq) MutateErr(n int8) bool {
	return rcv._tab.MutateInt8Slot(22, n)
}

func (rcv *Imq) StsMsg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Imq) Callback() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Imq) MutateCallback(n byte) bool {
	return rcv._tab.MutateByteSlot(26, n)
}

func (rcv *Imq) Ver(obj *Ver) *Ver {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Ver)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ImqStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func ImqAddBody(builder *flatbuffers.Builder, Body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Body), 0)
}
func ImqStartBodyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ImqAddFrom(builder *flatbuffers.Builder, From flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(From), 0)
}
func ImqAddTo(builder *flatbuffers.Builder, To flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(To), 0)
}
func ImqAddBroker(builder *flatbuffers.Builder, Broker byte) {
	builder.PrependByteSlot(3, Broker, 0)
}
func ImqAddCmd(builder *flatbuffers.Builder, Cmd int8) {
	builder.PrependInt8Slot(4, Cmd, 0)
}
func ImqAddMsgId(builder *flatbuffers.Builder, MsgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(MsgId), 0)
}
func ImqAddMsgType(builder *flatbuffers.Builder, MsgType int8) {
	builder.PrependInt8Slot(6, MsgType, 0)
}
func ImqAddSts(builder *flatbuffers.Builder, Sts int8) {
	builder.PrependInt8Slot(7, Sts, 0)
}
func ImqAddPath(builder *flatbuffers.Builder, Path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(Path), 0)
}
func ImqAddErr(builder *flatbuffers.Builder, Err int8) {
	builder.PrependInt8Slot(9, Err, 0)
}
func ImqAddStsMsg(builder *flatbuffers.Builder, StsMsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(StsMsg), 0)
}
func ImqAddCallback(builder *flatbuffers.Builder, Callback byte) {
	builder.PrependByteSlot(11, Callback, 0)
}
func ImqAddVer(builder *flatbuffers.Builder, Ver flatbuffers.UOffsetT) {
	builder.PrependStructSlot(12, flatbuffers.UOffsetT(Ver), 0)
}
func ImqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
