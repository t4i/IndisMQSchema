// automatically generated by the FlatBuffers compiler, do not modify

package IndisMQ

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Auth struct {
	_tab flatbuffers.Table
}

func GetRootAsAuth(buf []byte, offset flatbuffers.UOffsetT) *Auth {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Auth{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Auth) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Auth) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Pass() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Domain() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Required() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Auth) MutateRequired(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *Auth) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Auth) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *Auth) Nonce() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Ciphers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Auth) CiphersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Auth) Alg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Err() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Auth) MutateErr(n int8) bool {
	return rcv._tab.MutateInt8Slot(22, n)
}

func (rcv *Auth) ErrMsg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Msg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AuthStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func AuthAddUser(builder *flatbuffers.Builder, User flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(User), 0)
}
func AuthAddPass(builder *flatbuffers.Builder, Pass flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Pass), 0)
}
func AuthAddToken(builder *flatbuffers.Builder, Token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Token), 0)
}
func AuthAddDomain(builder *flatbuffers.Builder, Domain flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Domain), 0)
}
func AuthAddRequired(builder *flatbuffers.Builder, Required byte) {
	builder.PrependByteSlot(4, Required, 0)
}
func AuthAddTimestamp(builder *flatbuffers.Builder, Timestamp int64) {
	builder.PrependInt64Slot(5, Timestamp, 0)
}
func AuthAddNonce(builder *flatbuffers.Builder, Nonce flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(Nonce), 0)
}
func AuthAddCiphers(builder *flatbuffers.Builder, Ciphers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(Ciphers), 0)
}
func AuthStartCiphersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AuthAddAlg(builder *flatbuffers.Builder, Alg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(Alg), 0)
}
func AuthAddErr(builder *flatbuffers.Builder, Err int8) {
	builder.PrependInt8Slot(9, Err, 0)
}
func AuthAddErrMsg(builder *flatbuffers.Builder, ErrMsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(ErrMsg), 0)
}
func AuthAddMsg(builder *flatbuffers.Builder, Msg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(Msg), 0)
}
func AuthEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
